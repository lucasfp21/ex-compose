Docker Compose:
    Gerenciado por um arquivo yaml (geralmente compose.yaml)
    o arquivoé declarativo entao basicamente temos parametros declaraos e valores atribuidos para esses parametros

    O 1 parametro é a versao do arquivo:
        version (ele nao é mais usado a partir da versao 2 do compose)
        ex:
            version: "3.8"

    0 2 parametro é p services:
        basicamente é onde nos declaramos os containers que farao parte desse yaml.
        ex:
            services:
                ngnix:
                    container_name: nginx
                    image: nginx:latest
                    ports:
                        - 8080:80
                    command:
                        - echo
                        - hellow world

    
    para subir um docker Compose:  
        docker compose -f </caminho/do/arquivo/yaml> up
        ou docker compose up 
        para exexutar em background:
            docker compose up -d
        para remover os container orfaos (em caso de sobreecrever algum no compose.yaml)
            docker compose up -d --remove-orphans

    após qualquer alteracao no yaml basta aplicar novamente usando o comando docker compose up que ele altera somente o que foi alterado no yaml
    
    para naixar um docker Compose:
        docker compose down
            fora isso ainda temos os comandos:
                docker compose stop (para parar os containers)
                docker compose start (para voltar os containers)
    usando volume do tipo bind
        volumes:
          - C:\Users\lucas\Documents\DevopsPro\kubenews\kube-news\db_volume:/var/lib/postgresql/data

    para declarar um volume, tambem podemos criar um sessao volumes no mesmo nivel de identacao do services e declarar ali um volume    
        volumes:
            <nome volume>:
            external: true
             usado para "linkar" volumes criados por fora.

    para adicionar um rede, basta adicionar a o parametro networks no documento yaml
        networks:
         kubenews_net:
           driver: bridge

    tudo que for declarado como paramentro no compose file, tem que ser refrenciado no paramentro services, que é a declaracao do container

    Exemplo usando o driver de rede to tipo host:
        services:
          nginx:
            image: nginx
            # network_mode é usado para especificar o tipo de rede 
            network_mode: host

          curl:
            image: nginx
            #extra_hosts é usado para setar dns no arquivo /etc/hosts do container
            extra_hosts:
              aula.docker.lucas.com: "<ip>"

    depends_on:
       <nome do service>
       é usado para definir prioridades de execucao no momento da criacao do container
       para garantir que o service espere para iniciar corretamente podemos utilizar a opcao healthcheck no paramentro depends_on:
        depends_on:
          <nome do service>:
            condition: service_healthy

    lembrar de adicionar a parte de healthcheck la no service que sera testado:
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U kubenews"]
        interval: 5s
        timeout: 5s
        retries: 5

    PS. para usar o depends_on as vezes nao funciona junto com service name e o DB host tem que ter o mesmo nome do service no caso de banco

  docker compose --env-file hol.env up -d --build
    usado para  especificar um arquivo de variaveis de ambiente para ser usado no build
      é possivel usar no compose up tambem:
        docker compose --env-file hol.env up -d
      se o nome arquivo for .env entao nao é necessario passar a flag --env-file

  Exemplo de uso de valor padrao na variavel de ambiente:
    image: lufertony/kube-news:${KB_TAG:- latest}
      aqui definimos uma variavel para a tag da image e definimo o valor latest como default

  docker tag minha-imagem:v4 minha-imagem:latest
    usado para transfomar sua imagem mais recente como latest

  docker compose config
    usado para mostrar o resultado mas sem buildar ou rodar de fato o compose

  podemos criar uma yaml por service e extender no compose principal, basta adicionar no compose principal os parametros
  web:
    extends:
      file: ./kn-compose.yaml
      service: kubenews
    image: lufertony/web-news:latest

      extends é o tipo 
      file é o path do arquivo yaml que tem o servico que queremos incorporar
      service é o nome do service daquele yaml que queremo executar (yaml pode ter varios services)
      image é um paramentro novo que esta sendo sobrescrito aqui

    em caso de warning de orphans 
      docker compose -d --build --remove-orphans

    merge:
      ele une dois ou mais composes (se for um compose padrao e um arquivo compose chamado compose.override.yaml nao é necessario adicionar nenhum paramentro nos comandos)
        em caso de nome diferentes do padrao para o segundo compose ( =! compose.override.yaml)
          docker compose -f compose.yaml -f <nome do seundo compose> config ou up -d

          exemplo de  compose override:
            services:
              postgre:
                ports:
                  - 9000:9000
          nesse exemplo estamos adicionando a porta 9000 no service postgre

    include:
      basicamente adicionar recursos (services e outros) no compose mapeando o yaml, ex:
        include:
          - /path/do/arquivo/yaml

    profiles:
      basicamente um recurso que garante que determidado servico ou recurso só vai ser criado no profile correto:
          web:
            extends:
              file: ./kn-compose.yaml
              service: kubenews
            image: lufertony/web-news:latest
            profiles:
              - dev
              - hml

        nesse exemplo o service web so sera criado se passar o prifile dev ou hml no comando:
          docker compose --profile dev up -d 

    principais comandos do compose:
      docker compose up -d
        para rodar sem travar o terminal

      docker compose down para baixar 
      docker compose up -d --build
        para construir a imagem e subir os services, tem que ter o build setado no yaml
      docker compose up -d --remove-orphans
        para remover containers orfaos
      docker compose ps 
        mostra so os container que faz parte do compose
      docker compose logs
        mostra os logs
          para ver de um service especifico:
            docker compose logs <nome do service>
      docker compose exec
        roda um comando dentro do service
          docker compose exec <nome do service> <comando>
      docker compose pull/push/build
        ele faz o pull/push/build das imagens que tem no compose
      

Exemplo de compose usando variaveis de ambiente e varios services:
# version: "3.8"
  services:
    postgre:
    #  container_name: postgresql
      image: postgres:12.17
      ports:
        - 5432:5432
      environment:
        POSTGRES_PASSWORD: Pg123
        POSTGRES_USER: kubenews
        POSTGRES_DB: kubenews
      volumes:
      #  - C:\Users\lucas\Documents\DevopsPro\kubenews\kube-news\db_volume:/var/lib/postgresql/data
        - postgre_voldb:/var/#lib/postgresql/data
      networks:
        - kubenews_net
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U kubenews"]
        interval: 5s
        timeout: 5s
        retries: 5


    kubenews:
     # container_name: kube-web
      image: lufertony/kube-news
      depends_on:
        postgre:
          condition: service_healthy

      build:
        context: ./src
        dockerfile: Dockerfile
      ports:
        - 8080:8080
      networks:
        - kubenews_net

      environment:
        DB_PASSWORD: Pg123
        DB_USERNAME: kubenews
        DB_DATABASE: kubenews
        DB_HOST: postgre


  volumes:
    postgre_voldb:
      name: meu_postgre_voldb
    #  external: true

  networks:
    kubenews_net:
      driver: bridge
      name: kubenews_net